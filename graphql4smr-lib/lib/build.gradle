/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */


plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'

    // https://mvnrepository.com/artifact/com.graphql-java/graphql-java
    implementation group: 'com.graphql-java', name: 'graphql-java', version: '20.2'

    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'

    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.7'

    implementation 'com.google.code.gson:gson:2.10.1'

    implementation 'com.github.javafaker:javafaker:1.0.2'

    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'

    // https://mvnrepository.com/artifact/dev.mccue/guava-concurrent
    implementation group: 'dev.mccue', name: 'guava-concurrent', version: '0.0.3'

    // https://mvnrepository.com/artifact/ch.petikoch.libs/jtwfg
    implementation group: 'ch.petikoch.libs', name: 'jtwfg', version: '2.0.0'


    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.43.2.0'


}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}


test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}