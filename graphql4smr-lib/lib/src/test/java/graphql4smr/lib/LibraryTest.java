/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graphql4smr.lib;

import de.uniulm.vs.art.uds.UDSLock;
import de.uniulm.vs.art.uds.UDScheduler;
import graphql4smr.lib.util.LockBuilder;
import org.junit.Test;

import java.util.LinkedList;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;

import static org.junit.Assert.*;
import static org.junit.Assert.assertTrue;

public class LibraryTest {
    @Test public void exampletest() {
        assertTrue("testing something", true);
    }

    @Test public void testinggraphql4smrStringWrapper() {
        Integer howmanythreads = 100;

        String first = testinggraphql4smrStringWrapperhelper(howmanythreads);
        String second = testinggraphql4smrStringWrapperhelper(howmanythreads);

        System.out.println("first:" + first);
        System.out.println("second:" + second);
        assertNotEquals(first,second); // there are a 1/howmanythreads Chance that the test will fail
    }

    private String testinggraphql4smrStringWrapperhelper(Integer howmanythreads){
        GraphQL4SMRStringWrapper graphql4smr = new GraphQL4SMRStringWrapper();
        System.out.println(graphql4smr.request("{stringwrapper}"));

        String startvalue = "Startvalue";
        graphql4smr.stringwrapper.setValue((stringwrapper)-> {
            return startvalue;
        });

        Runnable runnable = () -> {
            System.out.println(graphql4smr.request("mutation {setstringwrapper(newstring:\""+Thread.currentThread().getName()+"\")}"));
        };
        LinkedList<Thread> list = new LinkedList();
        for (int i = 0; i < howmanythreads; i++) {
            Thread tempthread = new Thread(runnable);
            tempthread.setName("Thread" + i);
            list.add(tempthread);
        }
        for (Thread thread : list) {
            thread.start();
        }

        for (Thread tempthread : list) {
            try {
                tempthread.join();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
        return graphql4smr.stringwrapper.getValue();
    }


    @Test public void testinggraphql4smrsimple() {
        GraphQL4SMR graphql4smr = new GraphQL4SMR();
        System.out.println(graphql4smr.request("{counter}"));

        Integer startvalue = 121;
        graphql4smr.counter.setValue((counter)-> {
            return startvalue;
        });


        System.out.println(graphql4smr.request("mutation {increment(zahl:1)}"));



        assertTrue(graphql4smr.counter.getValue() == startvalue+1);
    }

    @Test public void testinggraphql4smr() {
        GraphQL4SMR graphql4smr = new GraphQL4SMR();
        System.out.println(graphql4smr.request("{counter}"));

        Integer startvalue = 121;
        graphql4smr.counter.setValue((counter)-> {
            return startvalue;
        });
        Integer howmanythreads = 10;


        LinkedList<Thread> list = new LinkedList();
        for(int i=0;i<howmanythreads;i++){
            Thread tempthread = new Thread(() -> {
                System.out.println(graphql4smr.request("mutation {increment(zahl:1)}"));
            });
            list.add(tempthread);
            tempthread.start();
        }

        for(Thread tempthread:list){
            try {
                tempthread.join();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }


        assertTrue(graphql4smr.counter.getValue() == startvalue+howmanythreads);
    }


    @Test(timeout = 15000)
    public void testinggraphql4smrStringWrapperwithUDS() {
        Integer howmanythreads = 10;

        boolean withUDS = true;
        int udsPrimaries = 5;
        int udsSteps = 2;

        String first = testinggraphql4smrStringWrapperwithUDShelper(howmanythreads,withUDS,udsPrimaries,udsSteps);
        String second = testinggraphql4smrStringWrapperwithUDShelper(howmanythreads,withUDS,udsPrimaries,udsSteps);
        System.out.println("first:" + first);
        System.out.println("second:" + second);

        assertEquals(first, second);
    }

    private String testinggraphql4smrStringWrapperwithUDShelper(Integer howmanythreads,boolean withUDS,int udsPrimaries,int udsSteps){
        UDScheduler uds = new UDScheduler(udsPrimaries);
            ExecutorService endTestCheckerPool = Executors.newFixedThreadPool(1);
            /*
        uds.addRequest(() -> uds.requestReconfiguration(udsPrimaries,
                udsSteps), () -> {
        });
        long numberOfThreadsSubmittedBeforeTest = uds.getNumberOfThreadsScheduled();

            Callable<Double> testDoneRunnable = () -> {
                long start = System.currentTimeMillis();
                while (uds.getNumberOfThreadsTerminated() < numberOfThreadsSubmittedBeforeTest + howmanythreads) {
                //while(howmanythreads != finished.get()  ) {
                    try {
                        Thread.sleep(50);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

                double duration = (double) System.currentTimeMillis() - start;
                double throughput = (double) howmanythreads / (duration / 1000);
                //logger.warning("UDSTester has submitted " + numberOfThreadsToCreate + " Threads.");
                //logger.warning("Elapsed time: " + duration + "ms (± 50ms).");
                //logger.warning("Approx. throughput: " + throughput + "threads/s");
                return throughput;
            };




            Future<Double> throughputFuture = endTestCheckerPool.submit(testDoneRunnable);
            */

            GraphQL4SMRStringWrapper graphQL4SMRStringWrapper = new GraphQL4SMRStringWrapper(new LockBuilder() {
                @Override
                public Lock build() {
                    return  new UDSLock(uds);
                }
            });

            uds.addRequest(() -> {
                System.out.println(graphQL4SMRStringWrapper.request("{stringwrapper}"));
            }, () -> {
            });

            for (int i = 0; i < howmanythreads; i++) {
                String threadname = "Thread" + i;
                uds.addRequest(() -> {
                    System.out.println(graphQL4SMRStringWrapper.request("mutation {setstringwrapper(newstring:\"" + threadname + "\")}"));
                }, () -> {
                    System.out.println("finsih");

                });
            }

            /*
            try {
                double throughput = throughputFuture.get();
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
             */
            uds.blockTerminate();

            return graphQL4SMRStringWrapper.stringwrapper.getValue();
    }

    @Test(timeout = 15000)
    public void testinggraphql4smrwithUDS() {
        int udsPrimaries = 5;
        int udsSteps = 2;
        UDScheduler uds = new UDScheduler(udsPrimaries);
        ExecutorService endTestCheckerPool = Executors.newFixedThreadPool(1);
        Integer howmanythreads = 10;
        AtomicInteger finished = new AtomicInteger();
        finished.set(0);
        boolean withUDS = true;

        Callable<Double> testDoneRunnable = () -> {
            long start = System.currentTimeMillis();
            long numberOfThreadsSubmittedBeforeTest = uds.getNumberOfThreadsScheduled();
            //while(uds.getNumberOfThreadsTerminated() < numberOfThreadsSubmittedBeforeTest + howmanythreads    ) {
            while(howmanythreads != finished.get()  ) {
                try {
                    Thread.sleep(50);
                } catch(InterruptedException e) {
                    e.printStackTrace();
                }
            }
            double duration = (double) System.currentTimeMillis() - start;
            double throughput = (double) howmanythreads / (duration / 1000);
            //logger.warning("UDSTester has submitted " + numberOfThreadsToCreate + " Threads.");
            //logger.warning("Elapsed time: " + duration + "ms (± 50ms).");
            //logger.warning("Approx. throughput: " + throughput + "threads/s");
            return throughput;
        };
        /*
        uds.addRequest(() -> uds.requestReconfiguration(udsPrimaries,
                udsSteps), () -> {});
         */

        Future<Double> throughputFuture = endTestCheckerPool.submit(testDoneRunnable);


        GraphQL4SMR graphql4smr = new GraphQL4SMR(UDSLock.class);

        uds.addRequest(() -> {
            System.out.println(graphql4smr.request("{counter}"));
        }, () -> {});

        LinkedList<Thread> list = new LinkedList();
        for(int i=0;i<howmanythreads;i++){
            /*
            Thread tempthread = new Thread(() -> {

            });
            list.add(tempthread);
            tempthread.start();
             */

            uds.addRequest(() -> {
                System.out.println(graphql4smr.request("mutation {increment(zahl:1)}"));
            }, () -> {
                System.out.println("finsih");
                finished.getAndIncrement();
            });
        }

        /*
        for(Thread tempthread:list){
            try {
                tempthread.join();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
         */
        /*
        try {
            double throughput = throughputFuture.get();
        } catch(InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }
         */
        /*
        uds.addRequest(() -> {
            assertTrue(graphql4smr.counter.getValue() == startvalue+howmanythreads+1);
            assertTrue(false);

        }, () -> {});
         */

        //uds.addRequest(() -> {
        //    System.out.println(graphql4smr.request("{counter}"));
        //}, () -> {});

        uds.blockTerminate();
        int value = graphql4smr.counter.getValue();
        System.out.println(value);


        assertEquals(value, 0 + howmanythreads);


    }

}
